[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=4]
code = "shader_type spatial;

const float SMOOTHSTEP_AA = 0.01;
uniform float wave_speed = 0.5; // Speed scale for the waves
uniform sampler2D surfaceNoise;
uniform sampler2D distortNoise;

uniform vec2 	sampler_scale 	 = vec2(0.25, 0.25); 			// Scale for the sampler
uniform vec2	sampler_direction= vec2(0.05, 0.04); 			// Direction and speed for the sampler offset

uniform float beer_factor = 0.8;
uniform float _distance = 0.0;
uniform float edge_scale = 0.25;


uniform float foam_distance = 0.01;
uniform float foam_max_distance = 0.4;
uniform float foam_min_distance = 0.04;
uniform vec4 foam_color: hint_color  = vec4(1.0);

uniform vec2 surface_noise_tiling = vec2(1.0, 4.0);
uniform vec3 surface_noise_scroll = vec3(0.03, 0.03, 0.0);
uniform float surface_noise_cutoff: hint_range(0, 1) = 0.777;
uniform float surface_distortion_amount: hint_range(0, 1) = 0.27;

uniform vec4 _DepthGradientShallow: hint_color = vec4(0.325, 0.807, 0.971, 0.725);
uniform vec4 _DepthGradientDeep: hint_color = vec4(0.086, 0.407, 1, 0.749);
uniform float _DepthMaxDistance: hint_range(0, 1) = 1.0;
uniform float _DepthFactor = 1.0;

varying vec2 noiseUV;
varying vec2 distortUV;
varying vec3 viewNormal;

uniform float depthOffset = -0.75;
vec4 alphaBlend(vec4 top, vec4 bottom)
{
	vec3 color = (top.rgb * top.a) + (bottom.rgb * (1.0 - top.a));
	float alpha = top.a + bottom.a * (1.0 - top.a);
	
	return vec4(color, alpha);
}

void vertex() {
	viewNormal = (MODELVIEW_MATRIX * vec4(NORMAL, 0.0)).xyz;
	noiseUV = UV * surface_noise_tiling;
	distortUV = UV;
}

float rim(float depth) {
	depth = 2f * depth - 1f;
	return foam_min_distance * foam_max_distance / (foam_max_distance + depth * (foam_min_distance - foam_max_distance));
}

void fragment(){
	// https://www.youtube.com/watch?v=Jq3he9Lbj7M
	
	float z_depth = rim(texture(DEPTH_TEXTURE, SCREEN_UV).r);
	float z_pos = rim(FRAGCOORD.z);
	float diff = z_depth - z_pos;
	
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
	depth = depth * 2.0 - 1.0;
	depth = PROJECTION_MATRIX[3][2] / (depth + PROJECTION_MATRIX[2][2]);
	depth = depth + VERTEX.z;
	depth = exp(-depth * beer_factor);
	depth = 1.0 - depth;
	float alpha = clamp(1.0 - depth,0.0,1.0);
	
	// Still unsure how to get properly the NORMAL from the camera
	// this was my best attempt
	vec3 existingNormal = vec3(dFdx(depth), dFdy(depth),0);
	
	float normalDot = clamp(dot(existingNormal.xyz, viewNormal), 0.0, 1.0);
	float foamDistance =  mix(foam_max_distance, foam_min_distance, normalDot);
	
	float foamDepth = clamp(depth / foamDistance, 0.0, 1.0);
	float surfaceNoiseCutoff = foamDepth * surface_noise_cutoff;
	
	vec4 distortNoiseSample = texture(distortNoise, distortUV);
	vec2 distortAmount = (distortNoiseSample.xy * 2.0 -1.0) * surface_distortion_amount;
	
	vec2 noise_uv = vec2(
		(noiseUV.x + TIME * surface_noise_scroll.x) + distortAmount.x , 
		(noiseUV.y + TIME * surface_noise_scroll.y + distortAmount.y)
	);
	
	diff += distortAmount.x*10f;
	
	float waterDepth = clamp(depth/ _DepthMaxDistance, 0.0, 1.0) * _DepthFactor;
	vec4 waterColor = mix(_DepthGradientShallow, _DepthGradientDeep, waterDepth*waterDepth);
	
	vec4 _color = waterColor;
	_color = mix(foam_color,_color,step(edge_scale,diff));
	
	ALBEDO = _color.rgb;
	ALPHA = 0.4;
	EMISSION = ALBEDO;
	if (ALBEDO.r > 0.9 && ALBEDO.g > 0.9 && ALBEDO.b>0.9){
		ALPHA = 0.9;}
}"

[resource]
render_priority = 1
shader = SubResource( 4 )
